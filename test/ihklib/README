==========
How to run
==========
./run.sh <ihklibxxx>

Example:
./run.sh ihklib001

===================================
How to judge it behaves as expected
===================================
Follow the instruction given by run.sh.

=====================
Descripation of tests
=====================
ihklib001:
boot sequence, use ihklib function for ikc_map [OK]

ihklib001:
boot sequence, use ihkosctl for ikc_map [OK]

ihklib002:
makedumpfile [OK]

ihklib003:
eventfd oom [OK]

ihklib004:
eventfd panic [OK]

ihklib005:
eventfd hungup using ihkmond [OK]
passing "-k 0" to mcreboot.sh [OK]

ihklib006:
redirect kmsg when destroying /dev/mcos0 [OK]

ihklib007:
redirect kmsg when the amount of kmsg exceeds the threshold [OK]
-k 0 option [OK]

ihklib008:
redirect kmsg stops the redirection when /dev/mcos0 is deleted and resume redirection when /dev/mcos0 is created again [OK]

ihklib009:
detect_hungup stops the detection when /dev/mcos0 is deleted and resume detection when /dev/mcos0 is created again [OK]

ihklib010:
McKernel sends event when the amount of kmsg exceeds the threshold [OK]

ihklib011:
overwrap test for -k 0 [OK]

ihklib012:
dead-lock check of struct ihk_kmsg_buf::lock [OK]

ihklib013:
overwrap test for ihkmond file slots [OK]

ihklib014:
host_driver.c acquires/releases kmsg_buf by using reference counter with passing "-k 0" to ihkmond [OK]

ihklib015:
ihkmond acquires/releases kmsg_buf with passing "-k 1" to ihkmond [OK]

ihklib016:
host_driver.c deletes stray kmsg_buf when too many  [OK]

ihklib017:
perform syslog() when detecting panic/hungup [OK]

ihklib018:
* Hang detection in mcexec using ihk_os_get_eventfd()
* Non-MPI program

ihklib019:
* Hang detection in mcexec using ihk_os_get_eventfd()
* MPI program
* Two execution styles are covered:
  1) Run by executing mpiexec directly
  2) Run through job submission system

ihklib020:
ihk_os_get_assigned_cpus() and ihk_os_query_cpu()

ihklib021:
ihk_get_reserved_cpus() and ihk_query_cpu()
